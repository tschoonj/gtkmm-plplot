name: CI

on:
  schedule:
    - cron: '0 2 * * 0'
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
#  visual-studio:
#    timeout-minutes: 60
#    runs-on: windows-latest

#    steps:
#    - uses: actions/checkout@v3.0.1
#    - name: Setup python
#      uses: actions/setup-python@v1
#      with:
#        python-version: 3.8
#    - uses: ilammy/msvc-dev-cmd@v1
#    - uses: BSFishy/meson-build@v1.0.1
#      with:
#        action: test
#        setup-options: -Dwith-fortran=false

  macos:
    timeout-minutes: 60
    runs-on: macos-latest
    steps:
    - name: Install homebrew dependencies
      run: |
        set -ex
        rm -f /usr/local/bin/2to3
        brew update
        brew upgrade || true
        brew install wget pkg-config doxygen graphviz git meson ninja gtkmm3 plplot
        set +ex
    - uses: actions/checkout@v3.0.1
    - name: Build and test 
      run: |
        set -ex
        meson setup --buildtype=debugoptimized -Dbuild-documentation=enabled builddir && cd builddir
        meson compile
        meson dist
        set +ex
      env:
        CC: clang
        CXX: clang++

  msys2:
    timeout-minutes: 60
    strategy:
      matrix:
        cc:
          - clang
          - gcc
          - meson
        include:
          - cc: clang
            cxx: clang++
          - cc: gcc
            cxx: g++
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >
          base-devel
          git
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-gtkmm3
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-clang
          mingw-w64-x86_64-lld
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-doxygen
          mingw-w64-x86_64-graphviz
          make
          patch
          wget
    - uses: actions/checkout@v3.0.1
    - name: Install PLplot
      run: |
        set -ex
        wget -q https://downloads.sourceforge.net/project/plplot/plplot/5.15.0%20Source/plplot-5.15.0.tar.gz
        tar xfz plplot-${PLPLOT_VERSION}.tar.gz
        cd plplot-${PLPLOT_VERSION}
        cmake -G "MSYS Makefiles" \
          -DENABLE_DYNDRIVERS=OFF \
          -DPLD_wingcc=OFF \
          -DENABLE_cxx=ON \
          -DENABLE_qt=OFF \
          -DENABLE_fortran=OFF \
          -DENABLE_tcl=OFF \
          -DENABLE_tk=OFF \
          -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
          .
        make
        make install
        set +ex
      env:
        PLPLOT_VERSION: 5.15.0
    - name: Build
      run: |
        set -ex
        meson setup --buildtype=debugoptimized -Dbuild-documentation=enabled builddir && cd builddir
        meson compile
        meson dist --allow-dirty
        set +ex
      env:
        CC: ${{matrix.cc}}
        CXX: ${{matrix.cxx}}

  linux:
    timeout-minutes: 60
    strategy:
      matrix:
        image: 
          - ubuntu:jammy
          - debian:bookworm
          - rockylinux:9
        cc:
          - clang
          - gcc

    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}

    steps:
    - name: Install ubuntu dependencies
      if: startsWith(matrix.image, 'ubuntu') || startsWith(matrix.image, 'debian')
      run: |
        set -ex
        apt-get --yes --force-yes update
        apt-get --yes --force-yes install gcc clang python3-pip python3-wheel python3-setuptools pkg-config git curl libplplot-dev libgtkmm-3.0-dev libgtkmm-3.0-doc doxygen graphviz libboost-all-dev meson ninja-build
        set +ex
      env:
        DEBIAN_FRONTEND: noninteractive
    - name: Split image names
      uses: jungwinter/split@v2.1.0
      id: image_splitted
      with:
        msg: ${{ matrix.image }}
        seperator: ':'
    - name: Activate PowerTools and EPEL repo
      if: matrix.image == 'rockylinux:9'
      run: |
        set -ex
        yum update -y
        yum clean all -y
        dnf install -y 'dnf-command(config-manager)'
        dnf config-manager --enable crb
        dnf install -y epel-release
        set +ex
    - name: Install RHEL dependencies
      if: startsWith(matrix.image, 'rockylinux') || startsWith(matrix.image, 'fedora')
      run: |
        set -ex
        yum clean all -y
        yum install -y make gcc-gfortran gcc clang libstdc++-devel gcc-c++ python3-pip pkgconfig git xz gtkmm30-devel plplot-devel doxygen graphviz boost-devel
        pip3 install meson ninja
        set +ex
    # checkout needs to happen later, as git needs to be installed to ensure a clone happens
    - uses: actions/checkout@v3.0.1
    - name: Build and test with meson
      if: matrix.buildsystem == 'meson'
      run: |
        set -ex
        export PATH=${HOME}/.local/bin:${PATH}
        meson setup --buildtype=debugoptimized -Dbuild-documentation=enabled builddir && cd builddir
        meson compile
        meson dist
        set +ex
      env:
        CC: ${{matrix.cc}}
        CXX: ${{matrix.cxx}}